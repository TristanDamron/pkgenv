from yaml import safe_load, dump
from os import environ, path, mkdir, getlogin
from platform import freedesktop_os_release
from random import randrange

dot_pkgenv = '/home/{}/.pkgenv'.format(getlogin())


def get_default_package_manager_for_distro():
    system_ident = freedesktop_os_release()
    if 'ubuntu' in system_ident['ID'] or 'debian' in system_ident['ID']:
        return 'apt-get'
    elif 'opensuse' in system_ident['ID']:
        return 'zypper'
    elif 'arch' in system_ident['ID']:
        return 'pacman'
    elif 'alpine' in system_ident['ID']:
        return 'apk'
    return ''


def create_yaml_config_from_template():
    config_yaml_template = """
    default_environment_path: {}

    custom_environment_paths: []

    active_package_environment: default_environment_path

    system_package_managers: [{}]
    """.format(environ['PATH'], get_default_package_manager_for_distro())
    with open('/home/{}/.pkgenv/config.yaml'.format(getlogin()), 'w') as f:
        config_yaml = safe_load(config_yaml_template)
        dump(config_yaml, f)


def generate_semiunique_environment_name():
    adjectives = ['smelly', 'funny', 'terrible', 'handsome', 'beautiful', 'ugly', 'giddy', 'fast', 'slow', 'boring', 'serious', 'spiky']
    animals = ['elephant', 'penguin', 'girrafe', 'horse', 'walrus', 'toucan', 'cat', 'dog', 'hamster']
    number = randrange(1, 99)
    return '{}-{}-{}'.format(adjectives[randrange(0, len(adjectives) - 1)],
                             animals[randrange(0, len(animals) - 1)], number)


def get_config_yaml_as_dict():
    return safe_load(open('{}/config.yaml'.format(dot_pkgenv), 'r'))


def write_config_yaml_from_dict(d):
    try:
        with open('{}/config.yaml'.format(dot_pkgenv), 'w') as f:
            dump(d, f)
        return True
    except:
        return False


def create_package_environment(name):
    use_auto_generated_environment_name = True if not name else False

    if use_auto_generated_environment_name:
        print('WARN: Creating a new package environment without a unique name is not encouraged, particularly ' + 
              'for systems with many package environments. Consider using `--name` next time.')
        name = generate_semiunique_environment_name()

    if not path.exists(dot_pkgenv):
        print('LOG: No config.yaml file present in ~/.pkgenv, creating one now...')
        mkdir(dot_pkgenv)
        mkdir('{}/envs'.format(dot_pkgenv))
        create_yaml_config_from_template()
        print('LOG: Success! Wrote {}/config.yaml'.format(dot_pkgenv))
        print('HINT: You can edit this config file at anytime by executing `pkgenv config`!')

    if not use_auto_generated_environment_name and path.exists('{}/envs/{}'.format(dot_pkgenv, name)):
        print('ERROR: Cannot create `{}`, package environment already exists!'.format(name))
        return False
    elif use_auto_generated_environment_name:
        tries = 0
        while path.exists('{}/envs/{}'.format(dot_pkgenv, name)):
            if tries == 5:
                print('ERROR: Tried to create a new package environment with an autogenerated name and failed 5 times ' +
                      'because those names were already taken by other package environments on the system. Try running this ' +
                      'command with `--name` instead.')
                return False 
            name = generate_semiunique_environment_name()
            tries += 1

    mkdir('{}/envs/{}'.format(dot_pkgenv, name))

    config_yaml_dict = get_config_yaml_as_dict()
    config_yaml_dict['custom_environment_paths'].append('{}/envs/{}'.format(dot_pkgenv, name))
    success = write_config_yaml_from_dict(config_yaml_dict)
    if not success: 
        print("ERROR: Failed to write new package environment path to {}/config.yaml!")

    print('Created {}.'.format(name))
    return True