from yaml import safe_load, dump
from os import environ, path, mkdir, getlogin, system
from platform import freedesktop_os_release
from random import randrange
from re import sub

user_home_path = '/home/{}'.format(getlogin())
dot_pkgenv = '{}/.pkgenv'.format(user_home_path)
config_yaml_path = '{}/config.yaml'.format(dot_pkgenv)

def get_default_package_manager_for_distro():
    system_ident = freedesktop_os_release()
    if 'ubuntu' in system_ident['ID'] or 'debian' in system_ident['ID']:
        return 'apt-get'
    elif 'opensuse' in system_ident['ID']:
        return 'zypper'
    elif 'arch' in system_ident['ID']:
        return 'pacman'
    elif 'alpine' in system_ident['ID']:
        return 'apk'
    return ''


def create_yaml_config_from_template():
    config_yaml_template = """
    default_environment_path: {}

    custom_environment_paths: []

    active_package_environment: default_environment_path

    system_package_managers: [{}]

    preferred_editor: 
    """.format(environ['PATH'], get_default_package_manager_for_distro())
    with open(config_yaml_path, 'w') as f:
        config_yaml = safe_load(config_yaml_template)
        dump(config_yaml, f)


def generate_semiunique_environment_name():
    adjectives = ['smelly', 'funny', 'terrible', 'handsome', 'beautiful', 'ugly', 'giddy', 'fast', 'slow', 'boring', 'serious', 'spiky']
    animals = ['elephant', 'penguin', 'girrafe', 'horse', 'walrus', 'toucan', 'cat', 'dog', 'hamster']
    number = randrange(1, 99)
    return '{}-{}-{}'.format(adjectives[randrange(0, len(adjectives) - 1)],
                             animals[randrange(0, len(animals) - 1)], number)


def get_config_yaml_as_dict():
    if not path.exists(config_yaml_path):
        print('ERROR: Cannot load {}! Have you run `pkgenv create`?'.format(config_yaml_path))
        return None 
    return safe_load(open('{}'.format(config_yaml_path), 'r'))


def write_config_yaml_from_dict(d):
    try:
        with open('{}'.format(config_yaml_path), 'w') as f:
            dump(d, f)
        return True
    except:
        return False


def create_package_environment(name):
    use_auto_generated_environment_name = True if not name else False

    if use_auto_generated_environment_name:
        print('WARN: Creating a new package environment without a unique name is not encouraged, particularly ' + 
              'for systems with many package environments. Consider using `--name` next time.')
        name = generate_semiunique_environment_name()

    if not path.exists(config_yaml_path):
        print('LOG: No config.yaml file present in ~/.pkgenv, creating one now...')
        mkdir(dot_pkgenv)
        mkdir('{}/envs'.format(dot_pkgenv))
        create_yaml_config_from_template()
        print('LOG: Success! Wrote {}'.format(config_yaml_path))
        print('HINT: You can edit this config file at anytime by executing `pkgenv config`!')

    if not use_auto_generated_environment_name and path.exists('{}/envs/{}'.format(dot_pkgenv, name)):
        print('ERROR: Cannot create `{}`, package environment already exists!'.format(name))
        return False
    elif use_auto_generated_environment_name:
        tries = 0
        while path.exists('{}/envs/{}'.format(dot_pkgenv, name)):
            if tries == 5:
                print('ERROR: Tried to create a new package environment with an autogenerated name and failed 5 times ' +
                      'because those names were already taken by other package environments on the system. Try running this ' +
                      'command with `--name` instead.')
                return False 
            name = generate_semiunique_environment_name()
            tries += 1

    mkdir('{}/envs/{}'.format(dot_pkgenv, name))

    config_yaml_dict = get_config_yaml_as_dict()
    config_yaml_dict['custom_environment_paths'].append('{}/envs/{}'.format(dot_pkgenv, name))
    success = write_config_yaml_from_dict(config_yaml_dict)
    if not success: 
        print('ERROR: Failed to write new package environment path to {}'.format(config_yaml_path))

    print('Created {}.'.format(name))
    return True

def open_config_yaml_file():
    config_yaml_dict = get_config_yaml_as_dict()
    if not config_yaml_dict:
        return False

    if not config_yaml_dict['preferred_editor']:
        print('WARN: You haven\'t set a preferred editor to open your config.yaml file!')
        ans = input('Would you prefer to use (V)im or (N)ano? ')
        while not ans.lower() in ['v', 'n']:
            ans = input('Would you prefer to use (V)im or (N)ano? ')

        if ans.lower() == 'v':
            config_yaml_dict['preferred_editor'] = 'vim'
        elif ans.lower() == 'n':
            config_yaml_dict['preferred_editor'] = 'nano'
        write_config_yaml_from_dict(config_yaml_dict)
    try:
        system('{} {}'.format(config_yaml_dict['preferred_editor'], config_yaml_path))
    except:
        print('ERROR: Could not open {} using {}'.format(config_yaml_path, config_yaml_dict['preferred_editor']))
        return False
    return True


def change_path_in_bashrc(path):
    lines = []
    with open('{}/.bashrc'.format(user_home_path), 'r') as f:
        lines = f.readlines()
        updated_lines = []
        for line in lines:
            rewrite = sub(r'export PATH=.*', ''.format(path), line)
            updated_lines.append(rewrite)
        lines = updated_lines

    with open('{}/.bashrc'.format(user_home_path), 'w+') as f:
        f.write('{}export PATH={}'.format(''.join(updated_lines), path))


def switch_to_package_environment(name):
    if not name:
        print('ERROR: No named package environment to switch to.')
        return False
    
    config_yaml_dict = get_config_yaml_as_dict()

    if not name == 'default' and not '{}/envs/{}'.format(dot_pkgenv, name) in config_yaml_dict['custom_environment_paths']:
        print('ERROR: No such package environment `{}`.'.format(name))
        return False

    if name == 'default':
        change_path_in_bashrc(config_yaml_dict['default_environment_path'])
        config_yaml_dict['active_package_environment'] = 'default_environment_path'
    else:
        change_path_in_bashrc('{}/envs/{}'.format(dot_pkgenv, name))
        config_yaml_dict['active_package_environment'] = environ['PATH']

    write_config_yaml_from_dict(config_yaml_dict)
    print("LOG: Successfully switched package environment to {}.".format(name))

    if not name == 'default':
        print("HINT: Your default PATH is {}. You can switch back by executing `pkgenv switch --name default`".format(config_yaml_dict['default_environment_path']))
    return True